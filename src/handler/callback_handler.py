from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, InputMediaVideo
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.callback_data import CallbackData

import keybord.reply_keybord as re_key
from database.db_function import AsyncOrmFunction
from handler.geo_function import reverseGeocode, distance_geo
import keybord.inline_keybord as in_key


router_callback = Router()

class CallbackDataUserId(CallbackData, prefix = "user"):
    user_id: int
    resume_id: int
    index: str

class CallbackDataLoveUser(CallbackData, prefix = "love"):
    love_id: int
    index: str

class CallbackDataUsername(CallbackData, prefix = "user_name"):
    username: str
    id_message: int
    index: str

class UserState(StatesGroup):
    name = State()
    age = State()
    gender = State()
    gender_interes = State()
    city = State()
    latitude = State()
    longitude = State()
    description = State()
    age_min_preference = State()
    age_max_preference = State()
    distance_preference = State() 
    video = State()

class NewResume(StatesGroup):
    new_name = State()
    new_description = State()
    new_video = State()
    new_age = State()
    new_max_preference = State()
    new_min_preference = State()
    new_gender_interes = State()
    new_gender = State()
    new_distance = State()

class MessageLove(StatesGroup):
    id_return = State()
    id_user = State()
    message = State()
    my_id = State()

class ReportUser(StatesGroup):
    report_message = State()
    report_id_resume = State()

class MessageToLove(CallbackData, prefix = "user_message"):
    id_resume: int
    id_user: int
    index: str

class ReportMessage(CallbackData, prefix = "users_message"):
    id_resume: int
    index: str

class DeleteReport(CallbackData, prefix = "delete_message"):
    id_user: int
    index: str

@router_callback.callback_query(F.data == 'start_resume')
async def proverka_pod(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ß—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—ã—Ö –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –¥–ª—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ—á–∫–æ–π üçá',
    reply_markup = re_key.keybord_name)
    await state.set_state(UserState.name)

@router_callback.message(UserState.name)
async def regist_name(message: Message, state: FSMContext):
    if message.text == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –Ω–∏–∫ üçá':
        await state.update_data(name = message.from_user.username)
        await message.answer('–¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –≤–∞—à –≤–æ–∑—Ä–∞—Å—Çü§≠')
        await state.set_state(UserState.age)
    if message.text != '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –Ω–∏–∫ üçá':
        await state.update_data(name = message.text)
        await message.answer('–¢–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –≤–∞—à –≤–æ–∑—Ä–∞—Å—Çü§≠')
        await state.set_state(UserState.age)

@router_callback.message(UserState.age)
async def regist_age(message: Message, state: FSMContext):
    await state.update_data(age = message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª üëáüèº', reply_markup = re_key.keybord_gender)
    await state.set_state(UserState.gender)

@router_callback.message(UserState.gender)
async def regist_gender(message: Message, state: FSMContext):
    if message.text == '–ú—É–∂—á–∏–Ω–∞ üíô':
        await state.update_data(gender = 'man')
    if message.text == '–î–µ–≤—É—à–∫–∞ ü©∑':
        await state.update_data(gender = 'women')
    await message.answer('–ö–∞–∫–æ–π –ø–æ–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ü´£', reply_markup = re_key.keybord_gender_interes)
    await state.set_state(UserState.gender_interes)

@router_callback.message(UserState.gender_interes)
async def regist_gender_interes(message: Message, state: FSMContext):
    if message.text == '–ú—É–∂—Å–∫–æ–π üíô':
        await state.update_data(gender_interes = 'man')
    if message.text == '–ñ–µ–Ω—Å–∫–∏–π ü©∑':
        await state.update_data(gender_interes = 'women')
    await message.answer('–î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—ã—Ö, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚öôÔ∏è', reply_markup = re_key.keybord_geo)
    await state.set_state(UserState.city)

@router_callback.message(UserState.city)
async def regist_city(message: Message, state: FSMContext, bot = Bot):
    await state.update_data(latitude = message.location.latitude)
    await state.update_data(longitude = message.location.longitude)
    mess = await bot.send_message(message.from_user.id, '–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚úÖ')
    await bot.pin_chat_message(message.from_user.id, message_id = mess.message_id)

    result = reverseGeocode((message.location.latitude, message.location.longitude))

    await state.update_data(city = result)
    await message.answer('–ó–∞–ø–∏—Å–∞–ª–∏ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å –æ–Ω–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ—Ä–∞ –ø—Ä–µ–¥—É–º–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üòâ')
    await state.set_state(UserState.description)

@router_callback.message(UserState.description)
async def regist_description(message: Message, state: FSMContext):
    await state.update_data(description = message.text)
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –∫–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –≤–∞—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ?')
    await state.set_state(UserState.age_min_preference)

@router_callback.message(UserState.age_min_preference)
async def regist_age_min(message: Message, state: FSMContext):
    await state.update_data(age_min_preference = message.text)
    await message.answer('–ê –∫–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ?')
    await state.set_state(UserState.age_max_preference)

@router_callback.message(UserState.age_max_preference)
async def regist_age_max(message: Message, state: FSMContext):
    await state.update_data(age_max_preference = message.text)
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–∏ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ üß≠', reply_markup = re_key.keybord_radius)
    await state.set_state(UserState.distance_preference)

@router_callback.message(UserState.distance_preference)
async def regist_distance(message: Message, state: FSMContext):
    if message.text == '5–∫–º':
        await state.update_data(distance_preference = '5')
    if message.text == '10–∫–º':
        await state.update_data(distance_preference = '10')
    if message.text == '20–∫–º':
        await state.update_data(distance_preference = '20')
    if message.text == '30–∫–º':
        await state.update_data(distance_preference = '30')
    await message.answer('–ü–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—Ä—É–∂–æ—á–µ–∫ –¥–ª—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã üì∏')
    await state.set_state(UserState.video)

@router_callback.message(UserState.video)
async def regist_video(message: Message, state: FSMContext):
    await state.update_data(video = message.video_note.file_id)
    result = await state.get_data()
    await AsyncOrmFunction.add_resume(int(message.from_user.id), int(result['age']), result['gender'], result['gender_interes'], result['city'], 
                                    float(result['latitude']), float(result['longitude']), result['name'], result['description'], result['video'], 
                                    int(result['age_min_preference']), int(result['age_max_preference']), int(result['distance_preference']))
    await message.answer('–ê–Ω–∫–µ—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤', reply_markup = re_key.keybord_poisk)
    await state.clear()


@router_callback.callback_query(F.data == 'update_name') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è
async def new_name(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')

@router_callback.message(NewResume.new_name)
async def regist_new_name(message: Message, state: FSMContext):
    await state.update_data(new_name = message.text)
    result = await state.get_data()
    await AsyncOrmFunction.upadate_name(message.from_user.id, result['new_name'])
    await state.clear()
    await message.answer('–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ ')
    

@router_callback.callback_query(F.data == 'update_description') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
async def new_description(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_description)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')

@router_callback.message(NewResume.new_description)
async def regist_new_description(message: Message, state: FSMContext):
    await state.update_data(new_description = message.text)
    result = await state.get_data()
    await AsyncOrmFunction.upadate_description(message.from_user.id, result['new_description'])
    await state.clear()
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ ')


@router_callback.callback_query(F.data == 'update_video') #–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ
async def new_photo(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_video)
    await callback.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∫—Ä—É–∂–æ—á–µ–∫')

@router_callback.message(NewResume.new_video)
async def regist_new_photo(message: Message, state: FSMContext):
    await state.update_data(new_video = message.video_note.file_id)
    result = await state.get_data()
    await AsyncOrmFunction.upadate_video(message.from_user.id, result['new_video'])
    await state.clear()
    await message.answer('–ö—Ä—É–∂–æ—á–µ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')


@router_callback.callback_query(F.data == 'update_age') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç
async def new_age(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_age)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç')

@router_callback.message(NewResume.new_age)
async def regist_new_age(message: Message, state: FSMContext):
    await state.update_data(new_age = message.text)
    result = await state.get_data()
    await AsyncOrmFunction.upadate_age(message.from_user.id, int(result['new_age']))
    await state.clear()
    await message.answer('–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω')


@router_callback.callback_query(F.data == 'update_max_age') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
async def new_max_preference(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_max_preference)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')

@router_callback.message(NewResume.new_max_preference)
async def regist_new_max_preference(message: Message, state: FSMContext):
    await state.update_data(new_max_preference = message.text)
    result = await state.get_data()
    await AsyncOrmFunction.upadate_max_preference(message.from_user.id, int(result['new_max_preference']))
    await state.clear()
    await message.answer('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω')


@router_callback.callback_query(F.data == 'update_min_age') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
async def new_min_preference(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_min_preference)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')

@router_callback.message(NewResume.new_min_preference)
async def regist_new_min_preference(message: Message, state: FSMContext):
    await state.update_data(new_min_preference = message.text)
    result = await state.get_data()
    await AsyncOrmFunction.upadate_min_preference(message.from_user.id, int(result['new_min_preference']))
    await state.clear()
    await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω')


@router_callback.callback_query(F.data == 'update_distance') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø–æ–∏—Å–∫–∞
async def new_distance(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_distance)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–¥–∏—É—Å', reply_markup = re_key.keybord_radius)

@router_callback.message(NewResume.new_distance)
async def regist_new_distance(message: Message, state: FSMContext):
    if message.text == '5–∫–º':
        await state.update_data(new_distance = '5')
    if message.text == '10–∫–º':
        await state.update_data(new_distance = '10')
    if message.text == '20–∫–º':
        await state.update_data(new_distance = '20')
    if message.text == '30–∫–º':
        await state.update_data(new_distance = '30')
    result = await state.get_data()
    await AsyncOrmFunction.upadate_min_preference(message.from_user.id, int(result['new_distance']))
    await state.clear()
    await message.answer('–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω')


@router_callback.callback_query(F.data == 'update_gender') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª
async def new_gender(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_gender)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª', reply_markup = re_key.keybord_gender)

@router_callback.message(NewResume.new_gender)
async def regist_new_gender(message: Message, state: FSMContext):
    if message.text == '–ú—É–∂—á–∏–Ω–∞ üíô':
        await state.update_data(new_gender = 'man')
    if message.text == '–î–µ–≤—É—à–∫–∞ ü©∑':
        await state.update_data(new_gender = 'women')
    result = await state.get_data()
    await AsyncOrmFunction.upadate_gender(message.from_user.id, result['new_gender'])
    await state.clear()
    await message.answer('–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω')


@router_callback.callback_query(F.data == 'update_gender_interes') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª –ø–æ–∏—Å–∫–∞
async def new_gender_interes(callback: CallbackQuery, state: FSMContext):
    await state.set_state(NewResume.new_gender_interes)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup = re_key.keybord_gender_interes)

@router_callback.message(NewResume.new_gender_interes)
async def regist_new_gender_interes(message: Message, state: FSMContext):
    if message.text == '–ú—É–∂—Å–∫–æ–π üíô':
        await state.update_data(new_gender_interes = 'man')
    if message.text == '–ñ–µ–Ω—Å–∫–∏–π ü©∑':
        await state.update_data(new_gender_interes = 'women')
    result = await state.get_data()
    await AsyncOrmFunction.upadate_gender(message.from_user.id, result['new_gender_interes'])
    await state.clear()
    await message.answer('–ü–æ–ª –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω–Ω')


@router_callback.callback_query(CallbackDataUserId.filter())
async def ban_user(callback: CallbackQuery, callback_data: CallbackDataUserId, state: FSMContext, bot = Bot):
    if callback_data.index == 'ban':
        await callback.message.delete()
        await AsyncOrmFunction.add_ban_user(callback.from_user.id, callback_data.user_id)
        await callback.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω–µ—Å–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚úèÔ∏è')

    if callback_data.index == 'message':
        await state.set_state(MessageLove.message)
        await state.update_data(id_resume = callback_data.resume_id) #–∞–π–¥–∏ —Ä–µ–∑—é–º–µ
        await state.update_data(id_user = callback_data.user_id) #–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–∑—é–º–µ
        await state.update_data(id_messages = callback.from_user.id) #–∞–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await callback.message.answer('–û—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üòâ')

    if callback_data.index == 'like':
        message = await AsyncOrmFunction.select_like_user(callback.from_user.id, callback_data.resume_id)

        if message == 'no_like':
            user_id = callback.from_user.id
            await AsyncOrmFunction.add_like_user(callback.from_user.id, callback_data.resume_id, None)
            await bot.send_message(chat_id = callback_data.user_id, text = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å, –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º—É ?', 
                                   reply_markup = in_key.create_keybord_love_message(callback_yes = CallbackDataLoveUser(index = 'Yes', love_id = user_id),
                                                                                     callback_no = CallbackDataLoveUser(index = 'No', love_id = user_id)))
            await callback.message.answer('–í–∞—à–∞ —Ä–µ–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ù£Ô∏è')

        if message == 'no_message' and message == 'message':
            await callback.message.answer('–í–∞—à–∞ —Ä–µ–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')

    if callback_data.index == 'report':
        await state.update_data(report_id_resume = callback_data.resume_id)
        await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã')
        await state.set_state(ReportUser.report_message)


@router_callback.message(ReportUser.report_message)
async def ban_user(message: Message, state: FSMContext,  bot = Bot):
    await state.update_data(report_message = message.text)
    report = await state.get_data()
    await message.answer('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ü§ñ')
    await bot.send_message(chat_id = '-1002242589305', text = f"–ù–∞ —Ä–µ–∑—é–º–µ ‚Ññ{report['report_id_resume']} –±—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –∂–∞–ª–æ–±–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: \n\n {report['report_message']}",
                           reply_markup = in_key.create_keybord_report(ReportMessage(index = 'resume', id_resume = report['report_id_resume']),
                                                                    ReportMessage(index = 'no', id_resume = report['report_id_resume'])))
    await state.clear()


@router_callback.message(MessageLove.message)
async def ban_user(message: Message, state: FSMContext,  bot = Bot):
    await state.update_data(message = message.sticker.file_id)
    result = await state.get_data()
    message_love = await AsyncOrmFunction.select_like_user(message.from_user.id, int(result['id_resume']))

    if message_love == 'no_like':
        await AsyncOrmFunction.add_like_user(message.from_user.id, int(result['id_resume']), result['message'])
        await bot.send_message(chat_id = int(result['id_user']), text = '–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ üò≥', 
                               reply_markup = in_key.create_keybord_message(MessageToLove(index = 'Yes', id_user = int(result['id_messages']), id_resume = int(result['id_resume'])),
                                                                                        MessageToLove(index = 'No', id_user = int(result['id_messages']), id_resume = int(result['id_resume']))))
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ')
        await state.clear()

    if message_love == 'no_message':
        await AsyncOrmFunction.upadate_message(message.from_user.id, int(result['id_resume']), result['message'])
        await bot.send_message(chat_id = int(result['id_user']), text = '–í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ üò≥', 
                               reply_markup = in_key.create_keybord_message(MessageToLove(index = 'Yes', id_user = int(result['id_messages']), id_resume = int(result['id_resume'])),
                                                                                        MessageToLove(index = 'No', id_user = int(result['id_messages']), id_resume = int(result['id_resume']))))
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ')
        await state.clear()

    if message_love == 'message':
        await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await state.clear()


@router_callback.callback_query(CallbackDataLoveUser.filter())
async def ban_user(callback: CallbackQuery, callback_data: CallbackDataLoveUser):
    if callback_data.index == 'Yes':
        resume_love = await AsyncOrmFunction.select_resume_user(callback_data.love_id)
        resume_user = await AsyncOrmFunction.select_resume_user(callback.from_user.id)
        distance = distance_geo(resume_love.longitude, resume_love.latitude, resume_user.longitude, resume_user.latitude)
        await callback.message.answer_photo(photo = resume_love.image, caption = f'<b><i>–ò–º—è: </i></b>{resume_love.fake_name}\n\
<b><i>–í–æ–∑—Ä–∞—Å—Ç: </i></b>{resume_love.age}\n\
<b><i>–ì–æ—Ä–æ–¥: </i></b>{resume_love.city}\n\
<b><i>–†–∞—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–∞—Å: </i></b>{int(distance)}–∫–º\n\
<b><i>–û–ø–∏—Å–∞–Ω–∏–µ: </i></b>{resume_love.description}',
                    parse_mode = "HTML", 
                    reply_markup = in_key.create_keybord_love_vz_message(CallbackDataUsername(index = 'vz', id_message = resume_love.user_id, username = callback.from_user.username), 
                                                    CallbackDataUsername(index = 'no', id_message = resume_love.user_id, username = callback.from_user.username)))

    if callback_data.index == "No":
        await callback.message.delete()

@router_callback.callback_query(CallbackDataUsername.filter())
async def ban_user(callback: CallbackQuery, callback_data: CallbackDataUsername, bot = Bot):
    if callback_data.index == 'vz':
        await bot.send_message(chat_id = callback_data.id_message, text = f'–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–µ ‚ù§Ô∏è‚Äçüî•\n–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É\–µ–π @{callback_data.username}')
    if callback_data.index == 'no':
        await callback.message.delete()

@router_callback.callback_query(MessageToLove.filter())
async def ban_user(callback: CallbackQuery, callback_data: MessageToLove):
    if callback_data.index == 'Yes':
        result = await AsyncOrmFunction.select_message_user(callback_data.id_user, callback_data.id_resume)
        await callback.message.answer_sticker(sticker = result)
        await callback.message.answer(text = '–ß—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ?', reply_markup = in_key.create_keybord_love_vz_message(CallbackDataUsername(index = 'vz', id_message = callback_data.id_user, username = callback.from_user.username), 
                                                    CallbackDataUsername(index = 'no', id_message = callback_data.id_user, username = callback.from_user.username)))
     
    if callback_data.index == 'No':
        callback.message.delete()




@router_callback.callback_query(F.data == 'delete_resume') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç
async def delete_resume(callback: CallbackQuery):
    await callback.message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ?', reply_markup = in_key.keybord_delete)

@router_callback.callback_query(F.data == 'full_delete_resume') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç
async def full_delete_resume(callback: CallbackQuery):
    await AsyncOrmFunction.delete_resume(callback.from_user.id)
    await callback.message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω–∞ üòî')

@router_callback.callback_query(F.data == 'no_delete_resume') #–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç
async def no_delete_resume(callback: CallbackQuery):
    await callback.message.delete()

@router_callback.callback_query(ReportMessage.filter())
async def ban_user(callback: CallbackQuery, callback_data: ReportMessage):
    if callback_data.index == 'no':
        await callback.message.delete()
    if callback_data.index == 'resume':
        result = await AsyncOrmFunction.select_user_to_id(int(callback_data.id_resume))
        await callback.message.delete()

        if result.gender == 'man':
            gender_user = 'üíô'
        if result.gender == 'women':
            gender_user = 'ü©∑'

        if result.gender_interes == 'man':
            gender_resume = 'üíô'
        if result.gender_interes == 'women':
            gender_resume = 'ü©∑'

        await callback.message.answer_video_note(video_note = result.video)
        await callback.message.answer(text = f'<b><i>–ò–º—è: </i></b>{result.fake_name}\n\
<b><i>–í–æ–∑—Ä–∞—Å—Ç: </i></b>{result.age}\n\
<b><i>–ì–æ—Ä–æ–¥: </i></b>{result.city}\n\
<b><i>–í–∞—à –ø–æ–ª: </i></b>{gender_user}\n\
<b><i>–ò—Å–∫–æ–º—ã–π –ø–æ–ª: </i></b>{gender_resume}\n\
<b><i>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: </i></b>{result.distance_preference}\n\
<b><i>–í–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞: </i></b>{result.age_min_preference}-{result.age_max_preference}\n\
<b><i>–û–ø–∏—Å–∞–Ω–∏–µ: </i></b>{result.description}',
        parse_mode = "HTML",
        reply_markup = in_key.create_keybord_report_update(DeleteReport(id_user = result.user_id, index = 'delete'),
                                                           DeleteReport(id_user = result.user_id, index = 'no_delete')))
        
@router_callback.callback_query(DeleteReport.filter())
async def ban_user(callback: CallbackQuery, callback_data: DeleteReport):
    if callback_data.index == 'no_delete':
        await callback.message.delete()

    if callback_data.index == 'delete':
        await AsyncOrmFunction.delete_resume(callback_data.id_user)
        await callback.message.answer('–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')